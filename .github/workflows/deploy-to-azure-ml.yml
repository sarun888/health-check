name: Deploy ML Health Check to Azure ML Studio

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production

# Required permissions for OIDC authentication
permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: '3.12'
  REGISTRY_NAME: 'aksinstant'
  IMAGE_NAME: 'ml-health-check'
  
  # Static Azure Configuration - UPDATE THESE VALUES
  SUBSCRIPTION_ID: '6ab08646-8f78-4187-ac87-c762aa843c9b'
  RESOURCE_GROUP_DEV: 'mlmodel'
  RESOURCE_GROUP_STAGING: 'mlmodel' 
  RESOURCE_GROUP_PROD: 'mlmodel'
  WORKSPACE_NAME_DEV: 'samplemodel'
  WORKSPACE_NAME_STAGING: 'samplemodel'
  WORKSPACE_NAME_PROD: 'samplemodel'
  REGISTRY_LOGIN_SERVER: 'aksinstant.azurecr.io'

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install bandit safety flake8 black isort pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run security scan with Bandit
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Check dependencies for vulnerabilities
        run: safety check --json --output safety-report.json || true

      - name: Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check code formatting
        run: |
          black --check . || echo "Code formatting check completed"
          isort --check-only . || echo "Import sorting check completed"
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-report.json
            safety-report.json
  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=html --junitxml=pytest-results.xml || echo "Tests completed"
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            pytest-results.xml
            htmlcov/
            coverage.xml
  # Build and Push Container Image
  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name != 'pull_request'
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Azure authentication for ACR access using OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}

      - name: Verify Azure authentication and ACR permissions
        run: |
          echo "Verifying Azure authentication..."
          az account show
          
          echo "Checking ACR permissions..."
          az acr show --name ${{ env.REGISTRY_NAME }} --query name -o tsv || {
            echo "❌ Cannot access ACR. Checking role assignments..."
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
            SUBSCRIPTION_ID="${{ env.SUBSCRIPTION_ID }}"
            
            echo "Current role assignments for service principal:"
            az role assignment list --assignee $CLIENT_ID --all --query "[].{Role:roleDefinitionName,Scope:scope}" -o table
            
            echo "Required permissions:"
            echo "- AcrPush role on ACR resource"
            echo "- Reader role on resource group (minimum)"
            
            exit 1
          }
      - name: Log in to Azure Container Registry
        run: |
          echo "Logging into ACR: ${{ env.REGISTRY_LOGIN_SERVER }}"
          az acr login --name ${{ env.REGISTRY_NAME }}
      - name: Build and Push Docker image
        id: build
        run: |
          IMAGE_URI="${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Building and pushing image: $IMAGE_URI"
          
          # Build with security scanning
          docker build \
            --tag $IMAGE_URI \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg VERSION=${{ github.ref_name }} \
            .
          
          # Push to ACR
          docker push $IMAGE_URI
          
          # Tag as latest for successful builds on main
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            LATEST_URI="${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest"
            docker tag $IMAGE_URI $LATEST_URI
            docker push $LATEST_URI
          fi
          
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      - name: Run container vulnerability scan
        run: |
          # Install Trivy for container scanning
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          
          # Scan the built image
          trivy image --exit-code 0 --severity HIGH,CRITICAL --format sarif -o trivy-results.sarif ${{ steps.build.outputs.image-uri }}
      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-scan-results
          path: trivy-results.sarif

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: 
      name: development
      url: ${{ steps.deploy.outputs.endpoint-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Azure ML dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install azure-ai-ml azure-identity azure-core azure-mgmt-resource
      # Azure authentication using OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}

      - name: Verify Azure authentication
        run: |
          echo "Verifying Azure authentication..."
          az account show
          az ml workspace list --resource-group ${{ env.RESOURCE_GROUP_DEV }}
      - name: Deploy to Azure ML - Development
        id: deploy
        run: |
          echo "Deploying to Development environment..."
          python deploy_to_azure_ml.py
        env:
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP_DEV }}
          WORKSPACE_NAME: ${{ env.WORKSPACE_NAME_DEV }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image-uri }}
          ENVIRONMENT: 'development'
          REGISTRY_LOGIN_SERVER: ${{ env.REGISTRY_LOGIN_SERVER }}

      - name: Health check deployment
        run: |
          echo "Running health check on deployed endpoint..."
          python -c "
          import requests
          import os
          import time
          
          # Wait for deployment to be ready
          time.sleep(30)
          
          endpoint_uri = os.environ.get('ENDPOINT_URI')
          if endpoint_uri:
              try:
                  response = requests.get(f'{endpoint_uri}/health', timeout=30)
                  print(f'Health check status: {response.status_code}')
                  print(f'Response: {response.text}')
              except Exception as e:
                  print(f'Health check failed: {e}')
          else:
              print('No endpoint URI available for health check')
          "
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.endpoint-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Azure ML dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install azure-ai-ml azure-identity azure-core azure-mgmt-resource
      # Azure authentication using OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}

      - name: Deploy to Azure ML - Staging
        id: deploy
        run: |
          echo "Deploying to Staging environment..."
          python deploy_to_azure_ml.py || python deploy_to_azure_ml_minimal.py
        env:
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP_STAGING }}
          WORKSPACE_NAME: ${{ env.WORKSPACE_NAME_STAGING }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image-uri }}
          ENVIRONMENT: 'staging'
          REGISTRY_LOGIN_SERVER: ${{ env.REGISTRY_LOGIN_SERVER }}

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          if [ -f "tests/integration/test_ml_endpoint.py" ]; then
            python -m pytest tests/integration/ --verbose || echo "Integration tests completed"
          fi
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          if [ -f "tests/smoke/test_smoke.py" ]; then
            python -m pytest tests/smoke/ --verbose || echo "Smoke tests completed"
          fi
  # Deploy to Production (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.endpoint-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Azure ML dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install azure-ai-ml azure-identity azure-core azure-mgmt-resource
      # Azure authentication using OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}

      - name: Deploy to Azure ML - Production
        id: deploy
        run: |
          echo "Deploying to Production environment..."
          python deploy_to_azure_ml.py
        env:
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP_PROD }}
          WORKSPACE_NAME: ${{ env.WORKSPACE_NAME_PROD }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image-uri }}
          ENVIRONMENT: 'production'
          REGISTRY_LOGIN_SERVER: ${{ env.REGISTRY_LOGIN_SERVER }}

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          if [ -f "tests/smoke/test_smoke.py" ]; then
            python -m pytest tests/smoke/ --verbose --environment=production || echo "Production smoke tests completed"
          fi
      - name: Update monitoring dashboards
        run: |
          echo "Updating monitoring dashboards..."
          # Add your monitoring update logic here
          # Example: Update Grafana dashboards, Azure Monitor alerts, etc.
  # Cleanup old deployments
  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Azure authentication for cleanup operations using OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}

      - name: Cleanup old container images
        run: |
          echo "Cleaning up old container images..."
          # Keep only the last 5 versions
          az acr repository show-tags --name ${{ env.REGISTRY_NAME }} --repository ${{ env.IMAGE_NAME }} --output table
          
          # Get tags older than 30 days and delete them (keeping latest 5)
          OLD_TAGS=$(az acr repository show-tags --name ${{ env.REGISTRY_NAME }} --repository ${{ env.IMAGE_NAME }} --orderby time_desc --query '[5:].name' -o tsv)
          for tag in $OLD_TAGS; do
            if [ "$tag" != "latest" ]; then
              echo "Deleting old image tag: $tag"
              az acr repository delete --name ${{ env.REGISTRY_NAME }} --image ${{ env.IMAGE_NAME }}:$tag --yes || true
            fi
          done
      - name: Cleanup old ML endpoints
        run: |
          echo "Cleaning up old ML endpoints..."
          # This would require additional Python script to manage ML endpoint cleanup
          # python cleanup_old_endpoints.py 