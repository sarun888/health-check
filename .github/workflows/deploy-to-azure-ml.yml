name: Deploy ML Health Check to Azure ML Studio

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production

env:
  PYTHON_VERSION: '3.12'
  REGISTRY_NAME: 'aksinstant'
  IMAGE_NAME: 'ml-health-check'
  
  # Static Azure Configuration - UPDATE THESE VALUES
  SUBSCRIPTION_ID: '6ab08646-8f78-4187-ac87-c762aa843c9b'
  RESOURCE_GROUP_DEV: 'mlmodel'
  RESOURCE_GROUP_STAGING: 'mlmodel' 
  RESOURCE_GROUP_PROD: 'mlmodel'
  WORKSPACE_NAME_DEV: 'samplemodel'
  WORKSPACE_NAME_STAGING: 'samplemodel'
  WORKSPACE_NAME_PROD: 'samplemodel'
  REGISTRY_LOGIN_SERVER: 'aksinstant.azurecr.io'

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install bandit safety flake8 black isort pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run security scan with Bandit
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Check dependencies for vulnerabilities
        run: safety check --json --output safety-report.json || true

      - name: Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check code formatting
        run: |
          black --check . || echo "Code formatting check completed"
          isort --check-only . || echo "Import sorting check completed"

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=html || echo "Tests completed"

  # Build and Push Container Image
  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name != 'pull_request'
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        run: |
          echo "Logging into ACR..."
          echo "Registry: ${{ env.REGISTRY_LOGIN_SERVER }}"
          echo "Image will be: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

      - name: Build Docker image
        id: build
        run: |
          IMAGE_URI="${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Building image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: 
      name: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Azure ML dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install azure-ai-ml azure-identity azure-mgmt-ml

      - name: Deploy to Azure ML - Development
        id: deploy
        run: |
          echo "Deploying to Development environment..."
          python deploy_to_azure_ml.py
        env:
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP_DEV }}
          WORKSPACE_NAME: ${{ env.WORKSPACE_NAME_DEV }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image-uri }}
          ENVIRONMENT: 'development'
          REGISTRY_LOGIN_SERVER: ${{ env.REGISTRY_LOGIN_SERVER }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: 
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Azure ML dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install azure-ai-ml azure-identity azure-mgmt-ml

      - name: Deploy to Azure ML - Staging
        id: deploy
        run: |
          echo "Deploying to Staging environment..."
          python deploy_to_azure_ml.py
        env:
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP_STAGING }}
          WORKSPACE_NAME: ${{ env.WORKSPACE_NAME_STAGING }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image-uri }}
          ENVIRONMENT: 'staging'
          REGISTRY_LOGIN_SERVER: ${{ env.REGISTRY_LOGIN_SERVER }}

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # python -m pytest tests/integration/ --endpoint-uri=${{ steps.deploy.outputs.endpoint-uri }}

  # Deploy to Production (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: 
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Azure ML dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install azure-ai-ml azure-identity azure-mgmt-ml

      - name: Deploy to Azure ML - Production
        id: deploy
        run: |
          echo "Deploying to Production environment..."
          python deploy_to_azure_ml.py
        env:
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP_PROD }}
          WORKSPACE_NAME: ${{ env.WORKSPACE_NAME_PROD }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image-uri }}
          ENVIRONMENT: 'production'
          REGISTRY_LOGIN_SERVER: ${{ env.REGISTRY_LOGIN_SERVER }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # python -m pytest tests/smoke/ --endpoint-uri=${{ steps.deploy.outputs.endpoint-uri }}

      - name: Update monitoring dashboards
        run: |
          echo "Update Grafana/Azure Monitor dashboards with new deployment"
          # Add your monitoring update logic here

  # Cleanup old deployments
  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Cleanup old images
        run: |
          echo "Cleaning up old container images..."
          # Add cleanup logic for old container images

      - name: Cleanup old ML endpoints
        run: |
          echo "Cleaning up old ML endpoints..."
          # Add cleanup logic for old Azure ML endpoints 